<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MVVMLight.Messaging</name>
    </assembly>
    <members>
        <member name="T:MVVMLight.Messaging.IExecuteWithObject">
            <summary>
            This interface is meant for the <see cref="T:MVVMLight.Messaging.WeakAction`1" /> class and can be 
            useful if you store multiple WeakAction{T} instances but don't know in advance
            what type T represents.
            </summary>
        </member>
        <member name="M:MVVMLight.Messaging.IExecuteWithObject.ExecuteWithObject(System.Object)">
            <summary>
            Executes an action.
            </summary>
            <param name="parameter">A parameter passed as an object,
            to be casted to the appropriate type.</param>
        </member>
        <member name="T:MVVMLight.Messaging.IMessenger">
            <summary>
            The Messenger is a class allowing objects to exchange messages.
            </summary>
        </member>
        <member name="M:MVVMLight.Messaging.IMessenger.Register``1(System.Object,System.Action{``0})">
            <summary>
            Registers a recipient for a type of message TMessage. The action
            parameter will be executed when a corresponding message is sent.
            <para>Registering a recipient does not create a hard reference to it,
            so if this recipient is deleted, no memory leak is caused.</para>
            </summary>
            <typeparam name="TMessage">The type of message that the recipient registers
            for.</typeparam>
            <param name="recipient">The recipient that will receive the messages.</param>
            <param name="action">The action that will be executed when a message
            of type TMessage is sent.</param>
        </member>
        <member name="M:MVVMLight.Messaging.IMessenger.Register``1(System.Object,System.Boolean,System.Action{``0})">
            <summary>
            Registers a recipient for a type of message TMessage.
            The action parameter will be executed when a corresponding 
            message is sent. See the receiveDerivedMessagesToo parameter
            for details on how messages deriving from TMessage (or, if TMessage is an interface,
            messages implementing TMessage) can be received too.
            <para>Registering a recipient does not create a hard reference to it,
            so if this recipient is deleted, no memory leak is caused.</para>
            </summary>
            <typeparam name="TMessage">The type of message that the recipient registers
            for.</typeparam>
            <param name="recipient">The recipient that will receive the messages.</param>
            <param name="receiveDerivedMessagesToo">If true, message types deriving from
            TMessage will also be transmitted to the recipient. For example, if a SendOrderMessage
            and an ExecuteOrderMessage derive from OrderMessage, registering for OrderMessage
            and setting receiveDerivedMessagesToo to true will send SendOrderMessage
            and ExecuteOrderMessage to the recipient that registered.
            <para>Also, if TMessage is an interface, message types implementing TMessage will also be
            transmitted to the recipient. For example, if a SendOrderMessage
            and an ExecuteOrderMessage implement IOrderMessage, registering for IOrderMessage
            and setting receiveDerivedMessagesToo to true will send SendOrderMessage
            and ExecuteOrderMessage to the recipient that registered.</para>
            </param>
            <param name="action">The action that will be executed when a message
            of type TMessage is sent.</param>
        </member>
        <member name="M:MVVMLight.Messaging.IMessenger.Send``1(``0)">
            <summary>
            Sends a message to registered recipients. The message will
            reach all recipients that registered for this message type
            using one of the Register methods.
            </summary>
            <typeparam name="TMessage">The type of message that will be sent.</typeparam>
            <param name="message">The message to send to registered recipients.</param>
        </member>
        <member name="M:MVVMLight.Messaging.IMessenger.Send``2(``0)">
            <summary>
            Sends a message to registered recipients. The message will
            reach only recipients that registered for this message type
            using one of the Register methods, and that are
            of the targetType.
            </summary>
            <typeparam name="TMessage">The type of message that will be sent.</typeparam>
            <typeparam name="TTarget">The type of recipients that will receive
            the message. The message won't be sent to recipients of another type.</typeparam>
            <param name="message">The message to send to registered recipients.</param>
        </member>
        <member name="M:MVVMLight.Messaging.IMessenger.Unregister(System.Object)">
            <summary>
            Unregisters a messager recipient completely. After this method
            is executed, the recipient will not receive any messages anymore.
            </summary>
            <param name="recipient">The recipient that must be unregistered.</param>
        </member>
        <member name="M:MVVMLight.Messaging.IMessenger.Unregister``1(System.Object)">
            <summary>
            Unregisters a message recipient for a given type of messages only. 
            After this method is executed, the recipient will not receive messages
            of type TMessage anymore, but will still receive other message types (if it
            registered for them previously).
            </summary>
            <typeparam name="TMessage">The type of messages that the recipient wants
            to unregister from.</typeparam>
            <param name="recipient">The recipient that must be unregistered.</param>
        </member>
        <member name="M:MVVMLight.Messaging.IMessenger.Unregister``1(System.Object,System.Action{``0})">
            <summary>
            Unregisters a message recipient for a given type of messages and for
            a given action. Other message types will still be transmitted to the
            recipient (if it registered for them previously). Other actions that have
            been registered for the message type TMessage and for the given recipient (if
            available) will also remain available.
            </summary>
            <typeparam name="TMessage">The type of messages that the recipient wants
            to unregister from.</typeparam>
            <param name="recipient">The recipient that must be unregistered.</param>
            <param name="action">The action that must be unregistered for
            the recipient and for the message type TMessage.</param>
        </member>
        <member name="T:MVVMLight.Messaging.Messenger">
            <summary>
            The Messenger is a class allowing objects to exchange messages.
            </summary>
        </member>
        <member name="P:MVVMLight.Messaging.Messenger.Default">
            <summary>
            Gets the Messenger's default instance, allowing
            to register and send messages in a static manner.
            </summary>
        </member>
        <member name="M:MVVMLight.Messaging.Messenger.OverrideDefault(MVVMLight.Messaging.Messenger)">
            <summary>
            Provides a way to override the Messenger.Default instance with
            a custom instance, for example for unit testing purposes.
            </summary>
            <param name="newMessenger">The instance that will be used as Messenger.Default.</param>
        </member>
        <member name="M:MVVMLight.Messaging.Messenger.Reset">
            <summary>
            Sets the Messenger's default (static) instance to null.
            </summary>
        </member>
        <member name="M:MVVMLight.Messaging.Messenger.Register``1(System.Object,System.Action{``0})">
            <summary>
            Registers a recipient for a type of message TMessage. The action
            parameter will be executed when a corresponding message is sent.
            <para>Registering a recipient does not create a hard reference to it,
            so if this recipient is deleted, no memory leak is caused.</para>
            </summary>
            <typeparam name="TMessage">The type of message that the recipient registers
            for.</typeparam>
            <param name="recipient">The recipient that will receive the messages.</param>
            <param name="action">The action that will be executed when a message
            of type TMessage is sent.</param>
        </member>
        <member name="M:MVVMLight.Messaging.Messenger.Register``1(System.Object,System.Boolean,System.Action{``0})">
            <summary>
            Registers a recipient for a type of message TMessage.
            The action parameter will be executed when a corresponding 
            message is sent. See the receiveDerivedMessagesToo parameter
            for details on how messages deriving from TMessage (or, if TMessage is an interface,
            messages implementing TMessage) can be received too.
            <para>Registering a recipient does not create a hard reference to it,
            so if this recipient is deleted, no memory leak is caused.</para>
            </summary>
            <typeparam name="TMessage">The type of message that the recipient registers
            for.</typeparam>
            <param name="recipient">The recipient that will receive the messages.</param>
            <param name="receiveDerivedMessagesToo">If true, message types deriving from
            TMessage will also be transmitted to the recipient. For example, if a SendOrderMessage
            and an ExecuteOrderMessage derive from OrderMessage, registering for OrderMessage
            and setting receiveDerivedMessagesToo to true will send SendOrderMessage
            and ExecuteOrderMessage to the recipient that registered.
            <para>Also, if TMessage is an interface, message types implementing TMessage will also be
            transmitted to the recipient. For example, if a SendOrderMessage
            and an ExecuteOrderMessage implement IOrderMessage, registering for IOrderMessage
            and setting receiveDerivedMessagesToo to true will send SendOrderMessage
            and ExecuteOrderMessage to the recipient that registered.</para>
            </param>
            <param name="action">The action that will be executed when a message
            of type TMessage is sent.</param>
        </member>
        <member name="M:MVVMLight.Messaging.Messenger.Register``1(System.Object,System.Object,System.Action{``0})">
            <summary>
            Registers a recipient for a type of message TMessage.
            The action parameter will be executed when a corresponding 
            message is sent.
            <para>Registering a recipient does not create a hard reference to it,
            so if this recipient is deleted, no memory leak is caused.</para>
            </summary>
            <typeparam name="TMessage">The type of message that the recipient registers
            for.</typeparam>
            <param name="recipient">The recipient that will receive the messages.</param>
            <param name="token">A token for a messaging channel. If a recipient registers
            using a token, and a sender sends a message using the same token, then this
            message will be delivered to the recipient. Other recipients who did not
            use a token when registering (or who used a different token) will not
            get the message. Similarly, messages sent without any token, or with a different
            token, will not be delivered to that recipient.</param>
            <param name="action">The action that will be executed when a message
            of type TMessage is sent.</param>
        </member>
        <member name="M:MVVMLight.Messaging.Messenger.Register``1(System.Object,System.Object,System.Boolean,System.Action{``0})">
            <summary>
            Registers a recipient for a type of message TMessage.
            The action parameter will be executed when a corresponding 
            message is sent. See the receiveDerivedMessagesToo parameter
            for details on how messages deriving from TMessage (or, if TMessage is an interface,
            messages implementing TMessage) can be received too.
            <para>Registering a recipient does not create a hard reference to it,
            so if this recipient is deleted, no memory leak is caused.</para>
            </summary>
            <typeparam name="TMessage">The type of message that the recipient registers
            for.</typeparam>
            <param name="recipient">The recipient that will receive the messages.</param>
            <param name="token">A token for a messaging channel. If a recipient registers
            using a token, and a sender sends a message using the same token, then this
            message will be delivered to the recipient. Other recipients who did not
            use a token when registering (or who used a different token) will not
            get the message. Similarly, messages sent without any token, or with a different
            token, will not be delivered to that recipient.</param>
            <param name="receiveDerivedMessagesToo">If true, message types deriving from
            TMessage will also be transmitted to the recipient. For example, if a SendOrderMessage
            and an ExecuteOrderMessage derive from OrderMessage, registering for OrderMessage
            and setting receiveDerivedMessagesToo to true will send SendOrderMessage
            and ExecuteOrderMessage to the recipient that registered.
            <para>Also, if TMessage is an interface, message types implementing TMessage will also be
            transmitted to the recipient. For example, if a SendOrderMessage
            and an ExecuteOrderMessage implement IOrderMessage, registering for IOrderMessage
            and setting receiveDerivedMessagesToo to true will send SendOrderMessage
            and ExecuteOrderMessage to the recipient that registered.</para>
            </param>
            <param name="action">The action that will be executed when a message
            of type TMessage is sent.</param>
        </member>
        <member name="M:MVVMLight.Messaging.Messenger.Send``1(``0)">
            <summary>
            Sends a message to registered recipients. The message will
            reach all recipients that registered for this message type
            using one of the Register methods.
            </summary>
            <typeparam name="TMessage">The type of message that will be sent.</typeparam>
            <param name="message">The message to send to registered recipients.</param>
        </member>
        <member name="M:MVVMLight.Messaging.Messenger.Send``2(``0)">
            <summary>
            Sends a message to registered recipients. The message will
            reach only recipients that registered for this message type
            using one of the Register methods, and that are
            of the targetType.
            </summary>
            <typeparam name="TMessage">The type of message that will be sent.</typeparam>
            <typeparam name="TTarget">The type of recipients that will receive
            the message. The message won't be sent to recipients of another type.</typeparam>
            <param name="message">The message to send to registered recipients.</param>
        </member>
        <member name="M:MVVMLight.Messaging.Messenger.Send``1(``0,System.Object)">
            <summary>
            Sends a message to registered recipients. The message will
            reach only recipients that registered for this message type
            using one of the Register methods, and that are
            of the targetType.
            </summary>
            <typeparam name="TMessage">The type of message that will be sent.</typeparam>
            <param name="message">The message to send to registered recipients.</param>
            <param name="token">A token for a messaging channel. If a recipient registers
            using a token, and a sender sends a message using the same token, then this
            message will be delivered to the recipient. Other recipients who did not
            use a token when registering (or who used a different token) will not
            get the message. Similarly, messages sent without any token, or with a different
            token, will not be delivered to that recipient.</param>
        </member>
        <member name="M:MVVMLight.Messaging.Messenger.Unregister(System.Object)">
            <summary>
            Unregisters a messager recipient completely. After this method
            is executed, the recipient will not receive any messages anymore.
            </summary>
            <param name="recipient">The recipient that must be unregistered.</param>
        </member>
        <member name="M:MVVMLight.Messaging.Messenger.Unregister``1(System.Object)">
            <summary>
            Unregisters a message recipient for a given type of messages only. 
            After this method is executed, the recipient will not receive messages
            of type TMessage anymore, but will still receive other message types (if it
            registered for them previously).
            </summary>
            <param name="recipient">The recipient that must be unregistered.</param>
            <typeparam name="TMessage">The type of messages that the recipient wants
            to unregister from.</typeparam>
        </member>
        <member name="M:MVVMLight.Messaging.Messenger.Unregister``1(System.Object,System.Object)">
            <summary>
            Unregisters a message recipient for a given type of messages only and for a given token. 
            After this method is executed, the recipient will not receive messages
            of type TMessage anymore with the given token, but will still receive other message types
            or messages with other tokens (if it registered for them previously).
            </summary>
            <param name="recipient">The recipient that must be unregistered.</param>
            <param name="token">The token for which the recipient must be unregistered.</param>
            <typeparam name="TMessage">The type of messages that the recipient wants
            to unregister from.</typeparam>
        </member>
        <member name="M:MVVMLight.Messaging.Messenger.Unregister``1(System.Object,System.Action{``0})">
            <summary>
            Unregisters a message recipient for a given type of messages and for
            a given action. Other message types will still be transmitted to the
            recipient (if it registered for them previously). Other actions that have
            been registered for the message type TMessage and for the given recipient (if
            available) will also remain available.
            </summary>
            <typeparam name="TMessage">The type of messages that the recipient wants
            to unregister from.</typeparam>
            <param name="recipient">The recipient that must be unregistered.</param>
            <param name="action">The action that must be unregistered for
            the recipient and for the message type TMessage.</param>
        </member>
        <member name="M:MVVMLight.Messaging.Messenger.Unregister``1(System.Object,System.Object,System.Action{``0})">
            <summary>
            Unregisters a message recipient for a given type of messages, for
            a given action and a given token. Other message types will still be transmitted to the
            recipient (if it registered for them previously). Other actions that have
            been registered for the message type TMessage, for the given recipient and other tokens (if
            available) will also remain available.
            </summary>
            <typeparam name="TMessage">The type of messages that the recipient wants
            to unregister from.</typeparam>
            <param name="recipient">The recipient that must be unregistered.</param>
            <param name="token">The token for which the recipient must be unregistered.</param>
            <param name="action">The action that must be unregistered for
            the recipient and for the message type TMessage.</param>
        </member>
        <member name="T:MVVMLight.Messaging.WeakAction">
            <summary>
            Stores an <see cref="P:MVVMLight.Messaging.WeakAction.Action" /> without causing a hard reference
            to be created to the Action's owner. The owner can be garbage collected at any time.
            </summary>
        </member>
        <member name="M:MVVMLight.Messaging.WeakAction.#ctor(System.Object,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:MVVMLight.Messaging.WeakAction" /> class.
            </summary>
            <param name="target">The action's owner.</param>
            <param name="action">The action that will be associated to this instance.</param>
        </member>
        <member name="P:MVVMLight.Messaging.WeakAction.Action">
            <summary>
            Gets the Action associated to this instance.
            </summary>
        </member>
        <member name="P:MVVMLight.Messaging.WeakAction.IsAlive">
            <summary>
            Gets a value indicating whether the Action's owner is still alive, or if it was collected
            by the Garbage Collector already.
            </summary>
        </member>
        <member name="P:MVVMLight.Messaging.WeakAction.Target">
            <summary>
            Gets the Action's owner. This object is stored as a <see cref="T:System.WeakReference" />.
            </summary>
        </member>
        <member name="M:MVVMLight.Messaging.WeakAction.Execute">
            <summary>
            Executes the action. This only happens if the action's owner
            is still alive.
            </summary>
        </member>
        <member name="M:MVVMLight.Messaging.WeakAction.MarkForDeletion">
            <summary>
            Sets the reference that this instance stores to null.
            </summary>
        </member>
        <member name="T:MVVMLight.Messaging.WeakAction`1">
            <summary>
            Stores an Action without causing a hard reference
            to be created to the Action's owner. The owner can be garbage collected at any time.
            </summary>
            <typeparam name="T">The type of the Action's parameter.</typeparam>
        </member>
        <member name="M:MVVMLight.Messaging.WeakAction`1.#ctor(System.Object,System.Action{`0})">
            <summary>
            Initializes a new instance of the WeakAction class.
            </summary>
            <param name="target">The action's owner.</param>
            <param name="action">The action that will be associated to this instance.</param>
        </member>
        <member name="P:MVVMLight.Messaging.WeakAction`1.Action">
            <summary>
            Gets the Action associated to this instance.
            </summary>
        </member>
        <member name="M:MVVMLight.Messaging.WeakAction`1.Execute">
            <summary>
            Executes the action. This only happens if the action's owner
            is still alive. The action's parameter is set to default(T).
            </summary>
        </member>
        <member name="M:MVVMLight.Messaging.WeakAction`1.Execute(`0)">
            <summary>
            Executes the action. This only happens if the action's owner
            is still alive.
            </summary>
            <param name="parameter">A parameter to be passed to the action.</param>
        </member>
        <member name="M:MVVMLight.Messaging.WeakAction`1.ExecuteWithObject(System.Object)">
            <summary>
            Executes the action with a parameter of type object. This parameter
            will be casted to T. This method implements <see cref="M:MVVMLight.Messaging.IExecuteWithObject.ExecuteWithObject(System.Object)" />
            and can be useful if you store multiple WeakAction{T} instances but don't know in advance
            what type T represents.
            </summary>
            <param name="parameter">The parameter that will be passed to the action after
            being casted to T.</param>
        </member>
    </members>
</doc>
